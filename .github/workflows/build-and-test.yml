name: build
# Keep *name* short. It is used as the title of the workflow status badge.

on:
  push: []
  schedule:
  - cron: '45 19 * * 5'  # every Friday at 19:45

defaults:
  run:
    shell: bash

jobs:
  test-dlb:  # job_id
    name: >
      Test 'dlb' with Python ${{ matrix.python-version }}
      on ${{ matrix.os }}
      ${{ matrix.is-default == true && '[default]' || '' }}
      ${{ matrix.do-accept-deprecation != true && '[fail on deprecation warning]' || '' }}
      ${{ matrix.is-experimental == true && '[may fail]' || '' }}

    runs-on: ${{ matrix.os }}
    timeout-minutes: 5
    continue-on-error: ${{ matrix.is-experimental == true }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: 'ubuntu-20.04'
            python-version: '3.9'
            is-default: true  # only job with 'default' set

          - os: 'ubuntu-20.04'
            python-version: '3.7.1'
            # oldest Python 3.7.x available in https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json
          - os: 'ubuntu-20.04'
            python-version: '3.7'
          - os: 'ubuntu-20.04'
            python-version: '3.8'

          - os: 'ubuntu-20.04'
            python-version: '3.10'
            do-accept-deprecation: true

          - os: 'ubuntu-20.04'
            python-version: '3.11.0-alpha - 3.11.0'
            do-accept-deprecation: true
            is-experimental: true

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: pip install coverage==6.4.1 coveralls==3.3.1
    - name: Run tests
      run: bash run-tests.bash --valid-skip-reason='requires Python 2' --valid-skip-reason='requires MS Windows' dlb
      env:
        PYTHON3COVERAGE: coverage3
        PYTHONWARNINGS: ${{ matrix.do-accept-deprecation == true && 'default::DeprecationWarning,default::PendingDeprecationWarning' || '' }}
    - name: Upload test coverage data
      if: matrix.is-default && (github.ref_type != 'branch' || github.ref == 'refs/heads/master')
      uses: actions/upload-artifact@v3
      with:
        name: .coverage-dlb
        path: test/dlb/.coverage

  test-dlb_contrib-earliest:  # job_id
    name: Test 'dlb' and 'dlb_contrib' [oldest supported tool versions]
    needs: test-dlb

    runs-on: ubuntu-latest
    container:
      image: ghcr.io/dlu-ch/dlb_contrib_test_debian10
      options: --cap-add SYS_PTRACE

    steps:
    - name: Checkout Git repository
      run: |
        set -e
        git -c http.sslVerify=false clone -n ${{ format('{0}/{1}.git', github.server_url, github.repository) }} dlb
        cd dlb
        git -c advice.detachedHead=false checkout ${{ github.ref_name }}
      working-directory: /home/tester
      env:
        HOME: /home/tester

    - name: Run tests
      run: bash run-tests.bash --valid-skip-reason='requires MS Windows' --valid-skip-reason='requires msvc' dlb dlb_contrib
      working-directory: /home/tester/dlb
      env:
        PYTHON3COVERAGE:
        PYTHONWARNINGS:

  test-examples-earliest:  # job_id
    name: Run examples [oldest supported tool versions]
    needs:
    - build-package
    - test-dlb_contrib-earliest

    runs-on: ubuntu-latest
    container:
      image: ghcr.io/dlu-ch/dlb_examples_test_debian10

    steps:
    - name: Checkout Git repository
      run: |
        set -e
        git -c http.sslVerify=false clone -n ${{ format('{0}/{1}.git', github.server_url, github.repository) }} dlb
        cd dlb
        git -c advice.detachedHead=false checkout ${{ github.ref_name }}
      working-directory: /home/tester
      env:
        HOME: /home/tester

    - name: Install dlb
      run: |
        set -e
        export PATH="${PATH:?}:~/.local/bin"
        bash build-package.bash
        pip3 install --user dist/dlb-*.whl
      working-directory: /home/tester/dlb
      env:
        HOME: /home/tester
    - name: Build examples twice (except 'c-msvc')
      run: |
        set -e
        shopt -s nullglob
        export PATH="${PATH:?}:~/.local/bin"  # for 'dlb' installed by pip

        for example_dir in example/*; do
            example="${example_dir##*/}"
            echo "::group::${example:?}"  # GitHub Actions workflow command

            if [ "${example:?}" == "c-msvc" ]; then
                printf 'skip %q\n' "${example:?}"
            else (
                cd -- "${example_dir:?}"
                if [ -f build-all.py ]; then
                    dlb build*.py
                    dlb
                fi
                if [ -f build-all ]; then
                    bash build-all
                    bash build-all
                fi
            ) fi

            echo "::endgroup::"  # GitHub Actions workflow command
        done
      working-directory: /home/tester/dlb
      env:
        HOME: /home/tester

  test-dlb_contrib-latest:  # job_id
    name: Test 'dlb' and 'dlb_contrib' [latest Ubuntu]
    needs: test-dlb

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3  # Git repository filesystem objects are owned by UID 1001

    - name: Build OCI image based on docker.io/library/ubuntu:rolling
      run: docker build -t ghcr.io/dlu-ch/dlb_contrib_test_ubuntu .
      working-directory: build/oci/dlb_contrib_test_ubuntu

    - name: Show package version in built OCI image
      run:
        docker run ghcr.io/dlu-ch/dlb_contrib_test_ubuntu
        dpkg-query --show --showformat '${binary:Package} ${Version} (${Installed-Size} kB)\n'

    - name: Run tests on built OCI image
      run:
        docker run
          "-v=${PWD}:/home/tester/dlb"
          --workdir=/home/tester/dlb
          --cap-add SYS_PTRACE
          --env PYTHONWARNINGS="${PYTHONWARNINGS}"
          ghcr.io/dlu-ch/dlb_contrib_test_ubuntu
          ./run-tests.bash
            --valid-skip-reason='requires MS Windows'
            --valid-skip-reason='requires msvc'
            dlb dlb_contrib
      env:
        PYTHONWARNINGS: default::DeprecationWarning,default::PendingDeprecationWarning

  upload-test-coverage-of-default:
    name: Upload test coverage data to coveralls.io
    if: github.ref_type != 'branch' || github.ref == 'refs/heads/master'
    needs: test-dlb

    runs-on: 'ubuntu-20.04'
    timeout-minutes: 5

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: pip install coveralls==3.3.1
    - name: Download test coverage data
      uses: actions/download-artifact@v3
      with:
        name: .coverage-dlb
        path: test/dlb  # will contain all extracted files artifact
    - name: Upload test coverage data to coveralls.io
      run: coveralls --service=github  # needs Git working directory
      working-directory: test/dlb
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-package:  # job_id
    name: Build Python wheel and .zip

    runs-on: 'ubuntu-20.04'

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # all commits, branches, and tags
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: pip install wheel==0.37.1
    - name: Build package
      run: bash build-package.bash

  build-doc:  # job_id
    name: Build documentation

    runs-on: 'ubuntu-20.04'

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # all commits, branches, and tags
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - name: Install dependencies
      # https://packages.ubuntu.com/focal/graphviz
      run: sudo apt-get install graphviz=2.42.2-3build2
    - name: Build HTML documentation
      run: bash build-doc.bash html
